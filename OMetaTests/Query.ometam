// A little query language


ometa Query {
  query = selectQuery,
  spaces = ' ' *,
  fields = '*' spaces,
  kSelect = 's' 'e' 'l' 'e' 'c' 't' ' ' spaces,
  kFrom = 'f''r''o''m'' ' spaces,
  kOrder = 'o' 'r' 'd' 'e' 'r' ' ',
  kBy = 'b' 'y' ' ' spaces,
  kWhere = 'w' 'h' 'e' 'r' 'e' ' ' spaces ,
  kASC = 'A' 'S' 'C' spaces,
  kDESC = 'D' 'E' 'S' 'C' spaces,
  charRange :x :y = char:d ? {{{ [d characterAtIndex:0] >= [x characterAtIndex:0] && [d characterAtIndex:0] <= [y characterAtIndex:0] }}} -> {{{ d }}} ,
  lower = charRange({{{@"a"}}},{{{@"z"}}}),
  upper = charRange({{{@"A"}}},{{{@"Z"}}}),
  letter = lower | upper,
  identifier = letter* : name spaces -> {{{ [name componentsJoinedByString:@""] }}},
  selectQuery = kSelect fields:fields kFrom identifier:entityName whereClause:where orderClause:order -> {{{
    ^{
    NSFetchRequest* f = [NSFetchRequest fetchRequestWithEntityName:entityName];
    f.predicate = where;
    f.sortDescriptors = order;
    return [self.managedObjectContext executeFetchRequest:f error:NULL];
    }()
  }}} ,
  whereClause = kWhere boolExpr:e -> {{{ e }}}
              | empty,
  boolExpr = identifier:field '=' spaces literal:r -> {{{ 
  ^{
  NSString* formatString = [field stringByAppendingString:@" = %@"];
  return [NSPredicate predicateWithFormat:formatString, r];
  }();
  }}},
  literal = stringLiteral,
  quote = '\'',
  stringLiteral = quote ((~ quote) * : contents) quote -> {{{ [contents componentsJoinedByString:@""] }}} ,
  orderClause = kOrder kBy sortDescriptor:i -> {{{ @[i] }}} 
              | empty,
  sortDescriptor = identifier:l ordering:o -> {{{ [NSSortDescriptor sortDescriptorWithKey:l ascending:[o boolValue]] }}},
  ordering = kASC -> {{{ @YES }}}
           | kDESC -> {{{ @NO }}}
           | empty -> {{{ @YES }}}
}
